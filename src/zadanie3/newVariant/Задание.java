package zadanie3.newVariant;

public class Задание {
    /*
    return, инкапсуляция, наследование, переоределение, интефрейсы,
    циклы, Math, операторы ветвления, декораторы. Калькулятор:
Суть задания:
	Написать различные варианты калькуляторов которые делают одно и тоже различными способами
	    (какой-то использует только собственные методы, какой-то обращается к библиотеке Math).
	    Тем самым вы в полной мере испробуете инкапсуляцию, наследование.
	Изучить плюсы и минусы использование абстракции, интерфейсов.
	Изучить библиотеку (класс) Math из jdk. (https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html)
	Изучить работу с переменными класса
	Изучить паттерн Декоратор
+ 1. Создать калькулятор который сможет посчитать результат выражения:
	1.1) 4.1 + 15 * 7 + (28 / 5) ^ 2. Вывести сохранённый результат в консоль.
	    Внимание, знак "^" обозначает возведение в степень.
+2. Создать класс CalculatorWithOperator.
+	2.1 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
+	2.2 В классе должны присутствовать математические методы:
		+ 2.2.1 4 базовых математических метода (деления, умножение, вычитание, сложение)
		        каждый из этих методов должен принимать два параметра (определитесь с их типами)
		        и должны возвращать результать (определиться с возвращаемым типом результата)
		        при помощи ключевого слово return.
+		2.2.2   3 метода (Возведение в степень дробного положительного числа в целую степень,
		        Модуль числа, Корень из числа (если у Вас плохо с математикой можно тут воспользоваться Math)).
+	2.3 В методах можно использовать любые арифметические операты.
+	2.4 Использование библиотеки Math ЗАПРЕЩЕНО! (кроме извлечения корня).
+	2.5 Создать класс CalculatorWithOperatorMain в котором будет точка входа (main метод).
+	            В main методе требуется создать экземпляр калькулятора и используя методы
+	            из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
+3. Создать класс CalculatorWithMathCopy.
+	3.1 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
+	3.2 В классе должны присутствовать математические методы:
+		3.2.1 4 базовых математических метода (деления, умножение, вычитание, сложение).
		        Скопировать базовые математические операции из CalculatorWithOperator.
+		3.2.2 3 метода (Возведение в степень дробного положительного числа в целую степень,
		        Модуль числа, Корень из числа). Данные методы должны содержать в своём теле
		        вызов библиотеки Math и возврат полученного результата.
+	3.3 Создать класс CalculatorWithMathCopyMain в котором будет точка входа (main метод).
	            В main методе требуется создать экземпляр калькулятора и используя методы
	            из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
+ 4. Создать класс CalculatorWithMathExtends.
+	4.1 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
+	4.2 Данный класс должен наследовать класс CalculatorWithOperator.
+	4.3 В классе должны присутствовать
+		4.3.1 4 базовых математических метода (деления, умножение, вычитание, сложение)
		        НЕ ДОЛЖНЫ быть объявлены в классе, а должны быть унаследованы от родительского класса.
+		4.3.2 3 метода (Возведение в степень дробного положительного числа в целую степень,
		        Модуль числа, Корень из числа). Данные методы должны ПЕРЕОПРЕДЕЛЯТЬ методы родительского
		        класса и должны содержать в своём теле вызов библиотеки Math и возврат полученного результата .
+	4.4 Создать класс CalculatorWithMathExtendsMain в котором будет точка входа (main метод).
	            В main методе требуется создать экземпляр калькулятора и используя методы
	            из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.

Задание посложнее. Для того чтобы преступить к данному заданию необходимо выполнить все предыдущие:
+5*. Создать класс CalculatorWithCounter.
+	5.1 Данный класс предназначен для того чтобы подсчитывать количество использований калькулятора.
+	5.2 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
+	5.3 Данный класс напрямую не умеет считать математику
+	5.4 В данном классе должены быть следующие варианты конструктора:
+		5.4.1 Принимающий объект класса CalculatorWithOperator
+		5.4.2 Принимаюший объект класса CalculatorWithMathCopy
+		5.4.3 Принимающий объект класса CalculatorWithMathExtends
+	5.4 В классе должны присутствовать математические методы:
+		5.5.1 4 базовых математических метода (деления, умножение, вычитание, сложение).
+		5.5.2 3 метода (Возведение в степень дробного положительного числа в целую степень,
		        Модуль числа, Корень из числа).
+	5.5 В классе должен быть метод long getCountOperation() который должен возвращать
	            количество использований данного калькулятора.
+	5.6 Создать класс CalculatorWithCounterMain в котором будет точка входа (main метод).
	            В main методе требуется создать экземпляр калькулятора и используя методы
	            из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
+6*. Создать интерфейс ICalculator.
+	6.1 В данном интерфейсе должны быть объявлены методы:
+		6.1.1 4 базовых математических метода (деления, умножение, вычитание, сложение).
+		6.1.2 3 метода (Возведение в степень дробного положительного числа в целую степень,
		        Модуль числа, Корень из числа).
+	6.2 Данный интерфейс должен быть прописан во всех классах (implements ICalculator)
+	6.3 Создать класс CalculatorWithCounterInterface и выполнить задание CalculatorWithCounter
	            c одним исключением: в данном классе будет один конструктор принимающий объект
	            любого класса реализующего интерфейс ICalculator
+7*. Создать CalculatorWithMemory.

+	7.1 Данный калькулятор предназначен для того чтобы расширить возможности калькулятора
	            и обеспечить его дополнительной функцией памяти.
	            В принципе работает как калькулятор из реальной жизни.
+	7.2 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
+	7.3 Данный класс напрямую не умеет считать математику.
+	7.4 В классе должны присутствовать математические методы:
+		7.4.1 4 базовых математических метода (деления, умножение, вычитание, сложение).
+		7.4.2 3 метода (Возведение в степень дробного положительного числа в целую степень,
		        Модуль числа, Корень из числа).
+	7.5 Функция памяти работает через методы:
+		7.5.1 Записать в память результат выполнения последнего вызванного метода
+		7.5.2 Получить из памяти записанное значение. При получении записи из памяти память стирается,
		        при записи нового значения память перезаписывается.
+	7.6 Создать класс CalculatorWithMemoryMain в котором будет точка входа (main метод).
	            В main методе требуется создать экземпляр калькулятора и используя методы из данного
	            экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
	            В мэйне запрещается использование переменных и запись в них значений
	            результата выполнения математических методов.
+ 8**. Создать класс CalculatorWithCounterDecorator и CalculatorWithMemoryDecorator                                         //сделать!!
	8.1 Отличие от предыдущих CalculatorWithCounter и CalculatorWithMemory
	            в том что данные классы реализуют интерфейс ICalculator.
+	8.2 Данный подход позволяет назвать данный классы "Декораторами".
	            Декоратор - это популярный паттерн который позволяет комбинирова и дополнять новыми
	            возможностями объекты (в нашем случае калькуляторы) не меняя код в их классе.
	            Тем самым мы приходим к тому что мы не наследуем классы для их расширения
	            и не привязываемся к реализации конкретного калькулятора.
	8.3 О декораторах можно прочитать по ссылкам:
		8.3.1 https://refactoring.guru/ru/design-patterns/decorator
		8.3.2 https://www.wikiwand.com/ru/%D0%94%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
+	8.4 Добавить в эти классы метод ICalculator getCalculator() который будут
	            возвращать вложенный в них калькулятор.
	8.5 Создать создать переменную типа ICalculator записав в неё новый экземпляр класса
	            CalculatorWithCounterDecorator которому в конструктор был передан новый экземпляр класса
	            CalculatorWithMemoryDecorator которому в конструтор был передан новый экземпляр класса CalculatorWithMathExtends.
	            Используя созданную переменную посчитать выражения из задания 1.
	            Вывести в консоль результат. Вывести количество использований калькулятора.
	            Вывести последнее сохранённое значение в памяти.
9**. Написать класс CalculatorStringExpression
	9.1 реализующий разбор (парсинг) СТРОКИ с математическим выражением:
	9.2 Класс должен понимать операторы: + - \ * ^ ||
	9.3 Класс должен понимать ( )
	9.4 Класс должен строго учитывать приоритеты в данном выражении
	9.5 Класс должен уметь парсить в строке константные значение: PI, E (Экспонента)
	9.6 Класс должен контролировать что в строке могут быть только допустие символы
	            (числа, операторы, скобки, константы)
	9.7 Класс должен контролировать чтобы выражение было валидным (2 + 2 - хорошо, 2 + - плохо)
     */
}
